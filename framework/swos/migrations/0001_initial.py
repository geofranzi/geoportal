# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-12 12:27
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_thumbs.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('layers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('continent', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('online_link', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('provided_information', models.TextField(blank=True)),
                ('dataset_language', models.CharField(blank=True, choices=[(b'ab', b'Abkhazian'), (b'aa', b'Afar'), (b'af', b'Afrikaans'), (b'ak', b'Akan'), (b'sq', b'Albanian'), (b'am', b'Amharic'), (b'ar', b'Arabic'), (b'an', b'Aragonese'), (b'hy', b'Armenian'), (b'as', b'Assamese'), (b'av', b'Avaric'), (b'ae', b'Avestan'), (b'ay', b'Aymara'), (b'az', b'Azerbaijani'), (b'bm', b'Bambara'), (b'ba', b'Bashkir'), (b'eu', b'Basque'), (b'be', b'Belarusian'), (b'bn', b'Bengali'), (b'bh', b'Bihari languages'), (b'bi', b'Bislama'), (b'bs', b'Bosnian'), (b'br', b'Breton'), (b'bg', b'Bulgarian'), (b'my', b'Burmese'), (b'ca', b'Catalan; Valencian'), (b'km', b'Central Khmer'), (b'ch', b'Chamorro'), (b'ce', b'Chechen'), (b'ny', b'Chichewa; Chewa; Nyanja'), (b'zh', b'Chinese'), (b'cv', b'Chuvash'), (b'kw', b'Cornish'), (b'co', b'Corsican'), (b'cr', b'Cree'), (b'hr', b'Croatian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'nl', b'Dutch; Flemish'), (b'dz', b'Dzongkha'), (b'en', b'English'), (b'eo', b'Esperanto'), (b'et', b'Estonian'), (b'ee', b'Ewe'), (b'fo', b'Faroese'), (b'fj', b'Fijian'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'ff', b'Fulah'), (b'gl', b'Galician'), (b'lg', b'Ganda'), (b'ka', b'Georgian'), (b'de', b'German'), (b'el', b'Greek, Modern (1453-)'), (b'gn', b'Guarani'), (b'gu', b'Gujarati'), (b'ht', b'Haitian; Haitian Creole'), (b'ha', b'Hausa'), (b'he', b'Hebrew'), (b'hz', b'Herero'), (b'hi', b'Hindi'), (b'ho', b'Hiri Motu'), (b'hu', b'Hungarian'), (b'is', b'Icelandic'), (b'io', b'Ido'), (b'ig', b'Igbo'), (b'id', b'Indonesian'), (b'ia', b'Interlingua (International Auxiliary Language Association)'), (b'ie', b'Interlingue; Occidental'), (b'iu', b'Inuktitut'), (b'ik', b'Inupiaq'), (b'ga', b'Irish'), (b'it', b'Italian'), (b'ja', b'Japanese'), (b'jv', b'Javanese'), (b'kl', b'Kalaallisut; Greenlandic'), (b'kn', b'Kannada'), (b'kr', b'Kanuri'), (b'ks', b'Kashmiri'), (b'kk', b'Kazakh'), (b'ki', b'Kikuyu; Gikuyu'), (b'rw', b'Kinyarwanda'), (b'ky', b'Kirghiz; Kyrgyz'), (b'kv', b'Komi'), (b'kg', b'Kongo'), (b'ko', b'Korean'), (b'kj', b'Kuanyama; Kwanyama'), (b'ku', b'Kurdish'), (b'lo', b'Lao'), (b'la', b'Latin'), (b'lv', b'Latvian'), (b'li', b'Limburgan; Limburger; Limburgish'), (b'ln', b'Lingala'), (b'lt', b'Lithuanian'), (b'lu', b'Luba-Katanga'), (b'lb', b'Luxembourgish; Letzeburgesch'), (b'mk', b'Macedonian'), (b'mg', b'Malagasy'), (b'ms', b'Malay'), (b'ms', b'Malay'), (b'ml', b'Malayalam'), (b'mt', b'Maltese'), (b'gv', b'Manx'), (b'mi', b'Maori'), (b'mr', b'Marathi'), (b'mh', b'Marshallese'), (b'mn', b'Mongolian'), (b'na', b'Nauru'), (b'nv', b'Navajo; Navaho'), (b'nd', b'Ndebele, North; North Ndebele'), (b'nr', b'Ndebele, South; South Ndebele'), (b'ng', b'Ndonga'), (b'ne', b'Nepali'), (b'se', b'Northern Sami'), (b'no', b'Norwegian'), (b'oc', b'Occitan (post 1500)'), (b'oj', b'Ojibwa'), (b'or', b'Oriya'), (b'om', b'Oromo'), (b'os', b'Ossetian; Ossetic'), (b'pi', b'Pali'), (b'pa', b'Panjabi; Punjabi'), (b'fa', b'Persian'), (b'pl', b'Polish'), (b'pt', b'Portuguese'), (b'ps', b'Pushto; Pashto'), (b'qu', b'Quechua'), (b'ro', b'Romanian; Moldavian; Moldovan'), (b'rm', b'Romansh'), (b'rn', b'Rundi'), (b'ru', b'Russian'), (b'sm', b'Samoan'), (b'sg', b'Sango'), (b'sa', b'Sanskrit'), (b'sc', b'Sardinian'), (b'sr', b'Serbian'), (b'sn', b'Shona'), (b'ii', b'Sichuan Yi; Nuosu'), (b'sd', b'Sindhi'), (b'si', b'Sinhala; Sinhalese'), (b'sk', b'Slovak'), (b'sl', b'Slovenian'), (b'so', b'Somali'), (b'st', b'Sotho, Southern'), (b'es', b'Spanish; Castilian'), (b'su', b'Sundanese'), (b'sw', b'Swahili'), (b'ss', b'Swati'), (b'sv', b'Swedish'), (b'tl', b'Tagalog'), (b'ty', b'Tahitian'), (b'tg', b'Tajik'), (b'ta', b'Tamil'), (b'tt', b'Tatar'), (b'te', b'Telugu'), (b'th', b'Thai'), (b'bo', b'Tibetan'), (b'ti', b'Tigrinya'), (b'to', b'Tonga (Tonga Islands)'), (b'ts', b'Tsonga'), (b'tn', b'Tswana'), (b'tr', b'Turkish'), (b'tk', b'Turkmen'), (b'tw', b'Twi'), (b'ug', b'Uighur; Uyghur'), (b'uk', b'Ukrainian'), (b'ur', b'Urdu'), (b'uz', b'Uzbek'), (b've', b'Venda'), (b'vi', b'Vietnamese'), (b'vo', b'Volapuk'), (b'wa', b'Walloon'), (b'cy', b'Welsh'), (b'fy', b'Western Frisian'), (b'wo', b'Wolof'), (b'xh', b'Xhosa'), (b'yi', b'Yiddish'), (b'yo', b'Yoruba'), (b'za', b'Zhuang; Chuang'), (b'zu', b'Zulu')], default=b'en', help_text=b'Language of the provided data', max_length=20)),
                ('continent', models.CharField(blank=True, choices=[(b'Global', b'Global'), (b'Africa', b'Africa'), (b'Antarctica', b'Antarctica'), (b'Asia', b'Asia'), (b'Australasia', b'Australasia'), (b'Europe', b'Europe'), (b'North America', b'North America'), (b'South America', b'South America')], max_length=30)),
                ('category', models.ManyToManyField(blank=True, to='swos.Category')),
                ('country', models.ManyToManyField(blank=True, to='swos.Country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalLayer',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layers.Layer')),
                ('datasource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_datasource', to='swos.ExternalDatabase', verbose_name=b'External Datasbase')),
            ],
            bases=('layers.layer',),
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('unit', models.CharField(blank=True, choices=[(b'%', b'Percent'), (b'sqkm', b'sqkm')], max_length=200)),
                ('shape_ident', models.CharField(max_length=200, null=True)),
                ('csv_ident', models.CharField(max_length=200, null=True)),
                ('calculation', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('calculation_input', models.ManyToManyField(blank=True, related_name='_indicator_calculation_input_+', to='swos.Indicator', verbose_name=b'Input Indicator for Calculation')),
                ('caluculation_reference_100_percent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hundred_indicator', to='swos.Indicator', verbose_name=b'100% Reference')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='IndicatorValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('value', models.FloatField()),
                ('time', models.DateField(blank=True, null=True, verbose_name=b'Time 1')),
                ('time_2', models.DateField(blank=True, null=True, verbose_name=b'Time 2')),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='value_indicator', to='swos.Indicator', verbose_name=b'Indicator')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_name', models.CharField(max_length=100)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Wetland',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('description', models.TextField(blank=True)),
                ('country', models.CharField(max_length=200)),
                ('geo_scale', models.CharField(blank=True, max_length=200)),
                ('size', models.FloatField(blank=True)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True)),
                ('partner', models.CharField(blank=True, max_length=200, null=True)),
                ('site_type', models.CharField(blank=True, max_length=200, null=True)),
                ('ecoregion', models.CharField(blank=True, max_length=200, null=True)),
                ('wetland_type', models.CharField(blank=True, max_length=200, null=True)),
                ('service_case', models.CharField(blank=True, max_length=200, null=True)),
                ('image_url', models.CharField(blank=True, max_length=200, null=True)),
                ('image_desc', models.TextField(blank=True, null=True)),
                ('video_keywords', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WetlandImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('copyright', models.CharField(blank=True, max_length=200, verbose_name=b'Copyright / Owner')),
                ('date', models.DateField(blank=True, null=True)),
                ('image', django_thumbs.db.models.ImageWithThumbsField(upload_to=b'images/')),
                ('wetland', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='image_wetland', to='swos.Wetland', verbose_name=b'Wetland')),
            ],
        ),
        migrations.CreateModel(
            name='WetlandLayer',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layers.Layer')),
                ('indicator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_indicator', to='swos.IndicatorValue', verbose_name=b'Indicator')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_product', to='swos.Product', verbose_name=b'Product')),
                ('wetland', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_wetland', to='swos.Wetland', verbose_name=b'Wetland')),
            ],
            bases=('layers.layer',),
        ),
        migrations.CreateModel(
            name='WetlandVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('copyright', models.CharField(blank=True, max_length=200, verbose_name=b'Copyright / Owner')),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(choices=[(b'YouTube', b'YouTube'), (b'Upload', b'Upload')], max_length=30, verbose_name=b'Source')),
                ('link', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'Link to external video')),
                ('thumb_link', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'Link to external thumbnail')),
                ('youtube_id', models.CharField(blank=True, max_length=20, null=True, verbose_name=b'YouTube ID')),
                ('youtube_cat', models.IntegerField(blank=True, null=True)),
                ('wetland', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_wetland', to='swos.Wetland', verbose_name=b'Wetland')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='wetlands',
            field=models.ManyToManyField(blank=True, related_name='swos_product_wetlands', to='swos.Wetland', verbose_name=b'Wetlands'),
        ),
        migrations.AddField(
            model_name='indicatorvalue',
            name='wetland',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='value_wetland', to='swos.Wetland', verbose_name=b'Wetland'),
        ),
        migrations.AddField(
            model_name='externaldatabase',
            name='wetland',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_wetland', to='swos.Wetland', verbose_name=b'Wetland'),
        ),
    ]
