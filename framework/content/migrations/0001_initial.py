# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-07-12 13:32
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
# import django_thumbs.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geospatial', '0001_initial'),
        ('layers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('ne_feature_id', models.IntegerField(blank=True, null=True)),
                ('continent', models.CharField(blank=True, max_length=200)),
                ('bbox', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('shortname', models.CharField(max_length=200)),
                ('online_link', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('provided_information', models.TextField(blank=True)),
                ('dataset_language', models.CharField(blank=True, choices=[('ab', 'Abkhazian'), ('aa', 'Afar'), ('af', 'Afrikaans'), ('ak', 'Akan'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('an', 'Aragonese'), ('hy', 'Armenian'), ('as', 'Assamese'), ('av', 'Avaric'), ('ae', 'Avestan'), ('ay', 'Aymara'), ('az', 'Azerbaijani'), ('bm', 'Bambara'), ('ba', 'Bashkir'), ('eu', 'Basque'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('bh', 'Bihari languages'), ('bi', 'Bislama'), ('bs', 'Bosnian'), ('br', 'Breton'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('ca', 'Catalan; Valencian'), ('km', 'Central Khmer'), ('ch', 'Chamorro'), ('ce', 'Chechen'), ('ny', 'Chichewa; Chewa; Nyanja'), ('zh', 'Chinese'), ('cv', 'Chuvash'), ('kw', 'Cornish'), ('co', 'Corsican'), ('cr', 'Cree'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch; Flemish'), ('dz', 'Dzongkha'), ('en', 'English'), ('eo', 'Esperanto'), ('et', 'Estonian'), ('ee', 'Ewe'), ('fo', 'Faroese'), ('fj', 'Fijian'), ('fi', 'Finnish'), ('fr', 'French'), ('ff', 'Fulah'), ('gl', 'Galician'), ('lg', 'Ganda'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek, Modern (1453-)'), ('gn', 'Guarani'), ('gu', 'Gujarati'), ('ht', 'Haitian; Haitian Creole'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hz', 'Herero'), ('hi', 'Hindi'), ('ho', 'Hiri Motu'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('io', 'Ido'), ('ig', 'Igbo'), ('id', 'Indonesian'), ('ia', 'Interlingua (International Auxiliary Language Association)'), ('ie', 'Interlingue; Occidental'), ('iu', 'Inuktitut'), ('ik', 'Inupiaq'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kl', 'Kalaallisut; Greenlandic'), ('kn', 'Kannada'), ('kr', 'Kanuri'), ('ks', 'Kashmiri'), ('kk', 'Kazakh'), ('ki', 'Kikuyu; Gikuyu'), ('rw', 'Kinyarwanda'), ('ky', 'Kirghiz; Kyrgyz'), ('kv', 'Komi'), ('kg', 'Kongo'), ('ko', 'Korean'), ('kj', 'Kuanyama; Kwanyama'), ('ku', 'Kurdish'), ('lo', 'Lao'), ('la', 'Latin'), ('lv', 'Latvian'), ('li', 'Limburgan; Limburger; Limburgish'), ('ln', 'Lingala'), ('lt', 'Lithuanian'), ('lu', 'Luba-Katanga'), ('lb', 'Luxembourgish; Letzeburgesch'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mt', 'Maltese'), ('gv', 'Manx'), ('mi', 'Maori'), ('mr', 'Marathi'), ('mh', 'Marshallese'), ('mn', 'Mongolian'), ('na', 'Nauru'), ('nv', 'Navajo; Navaho'), ('nd', 'Ndebele, North; North Ndebele'), ('nr', 'Ndebele, South; South Ndebele'), ('ng', 'Ndonga'), ('ne', 'Nepali'), ('se', 'Northern Sami'), ('no', 'Norwegian'), ('oc', 'Occitan (post 1500)'), ('oj', 'Ojibwa'), ('or', 'Oriya'), ('om', 'Oromo'), ('os', 'Ossetian; Ossetic'), ('pi', 'Pali'), ('pa', 'Panjabi; Punjabi'), ('fa', 'Persian'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('ps', 'Pushto; Pashto'), ('qu', 'Quechua'), ('ro', 'Romanian; Moldavian; Moldovan'), ('rm', 'Romansh'), ('rn', 'Rundi'), ('ru', 'Russian'), ('sm', 'Samoan'), ('sg', 'Sango'), ('sa', 'Sanskrit'), ('sc', 'Sardinian'), ('sr', 'Serbian'), ('sn', 'Shona'), ('ii', 'Sichuan Yi; Nuosu'), ('sd', 'Sindhi'), ('si', 'Sinhala; Sinhalese'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('st', 'Sotho, Southern'), ('es', 'Spanish; Castilian'), ('su', 'Sundanese'), ('sw', 'Swahili'), ('ss', 'Swati'), ('sv', 'Swedish'), ('tl', 'Tagalog'), ('ty', 'Tahitian'), ('tg', 'Tajik'), ('ta', 'Tamil'), ('tt', 'Tatar'), ('te', 'Telugu'), ('th', 'Thai'), ('bo', 'Tibetan'), ('ti', 'Tigrinya'), ('to', 'Tonga (Tonga Islands)'), ('ts', 'Tsonga'), ('tn', 'Tswana'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('tw', 'Twi'), ('ug', 'Uighur; Uyghur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('ve', 'Venda'), ('vi', 'Vietnamese'), ('vo', 'Volapuk'), ('wa', 'Walloon'), ('cy', 'Welsh'), ('fy', 'Western Frisian'), ('wo', 'Wolof'), ('xh', 'Xhosa'), ('yi', 'Yiddish'), ('yo', 'Yoruba'), ('za', 'Zhuang; Chuang'), ('zu', 'Zulu')], default='en', help_text='Language of the provided data', max_length=20)),
                ('geoss_datasource_id', models.TextField(blank=True, null=True)),
                ('continent', models.CharField(blank=True, choices=[('Global', 'Global'), ('Africa', 'Africa'), ('Antarctica', 'Antarctica'), ('Asia', 'Asia'), ('Oceania', 'Oceania'), ('Europe', 'Europe'), ('North America', 'North America'), ('South America', 'South America')], max_length=30)),
                ('category', models.ManyToManyField(blank=True, to='content.Category')),
                ('country', models.ManyToManyField(blank=True, to='content.Country')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_region', to='geospatial.Region', verbose_name='Region')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalLayer',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layers.Layer')),
                ('datasource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_datasource', to='content.ExternalDatabase', verbose_name='External Database')),
            ],
            bases=('layers.layer',),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('copyright', models.CharField(blank=True, max_length=200, verbose_name='Copyright / Owner')),
                ('date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='images/')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_region', to='geospatial.Region', verbose_name='Region')),
            ],
        ),
        migrations.CreateModel(
            name='SatdataLayer',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layers.Layer')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_satdata', to='geospatial.Region', verbose_name='Region')),
            ],
            bases=('layers.layer',),
        ),
        migrations.CreateModel(
            name='StoryLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('description', models.TextField(blank=True, null=True)),
                ('authors', models.TextField(blank=True, null=True)),
                ('link_to_product', models.BooleanField(default='False', help_text='Storyline will be linked to a product instead of a wetland')),
                ('story_line_file_name', models.CharField(blank=True, help_text='File name for download', max_length=50, null=True)),
                ('story_line_file', models.FileField(blank=True, help_text='Upload storyline as pdf file', null=True, upload_to='downloads', verbose_name='Storyline file')),
                ('active', models.BooleanField(default=False)),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='geospatial.Region')),
            ],
        ),
        migrations.CreateModel(
            name='StoryLineFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='StoryLineInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('story_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_line', to='content.StoryLine')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='StoryLinePart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headline', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image_name', models.CharField(blank=True, max_length=200, null=True)),
                ('image_description', models.TextField(blank=True, null=True)),
                ('image_copyright', models.CharField(blank=True, max_length=200, verbose_name='Copyright / Owner')),
                ('image_date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, help_text='To avoid cutting off parts of your image please resize it in advance. Right position: max. 300px width; Bottom max. 600px. If you upload a GIF please make sure the size is not higher than 500kb', null=True, upload_to='images/')),
                ('image_position', models.CharField(choices=[('right', 'right'), ('bottom', 'bottom')], default='right', max_length=20)),
                ('remove_layer', models.BooleanField(default='False', help_text='Remove added layer on the next step')),
                ('west', models.FloatField(blank=True, help_text='e.g. -5,3', null=True, verbose_name='BBOX west coordinate')),
                ('east', models.FloatField(blank=True, help_text='e.g. 10,5', null=True, verbose_name='BBOX east coordinate')),
                ('north', models.FloatField(blank=True, help_text='e.g. 8,2', null=True, verbose_name='BBOX north coordinate')),
                ('south', models.FloatField(blank=True, help_text='e.g. -3,9', null=True, verbose_name='BBOX south coordinate')),
                ('external_layer', models.ManyToManyField(blank=True, related_name='external_layer', to='layers.Layer')),
                ('features', models.ManyToManyField(blank=True, to='content.StoryLineFeature')),
                ('indicator_layer', models.ManyToManyField(blank=True, related_name='indicator_layer', to='layers.Layer')),
                ('product_layer', models.ManyToManyField(blank=True, to='layers.Layer')),
                ('region', models.ForeignKey(help_text='Plaese click - Save and continue editing - to update the layer lists below', on_delete=django.db.models.deletion.CASCADE, to='geospatial.Region')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('copyright', models.CharField(blank=True, max_length=200, verbose_name='Copyright / Owner')),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(choices=[('YouTube', 'YouTube'), ('Upload', 'Upload')], max_length=30, verbose_name='Source')),
                ('link', models.CharField(blank=True, max_length=200, null=True, verbose_name='Link to external video')),
                ('thumb_link', models.CharField(blank=True, max_length=200, null=True, verbose_name='Link to external thumbnail')),
                ('youtube_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='YouTube ID')),
                ('youtube_cat', models.IntegerField(blank=True, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_region', to='geospatial.Region', verbose_name='Region')),
            ],
        ),
        migrations.AddField(
            model_name='storylineinline',
            name='story_line_part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_line_parts', to='content.StoryLinePart'),
        ),
    ]
