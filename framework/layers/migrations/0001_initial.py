# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-07-12 11:14
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mapviewer', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConformityInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('title', models.CharField(blank=True, max_length=400, null=True, verbose_name='Conformity')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
            ],
        ),
        migrations.CreateModel(
            name='ConstraintConditionsInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('constraints_cond', models.CharField(blank=True, max_length=400, null=True, verbose_name='Conditions applying to access and use')),
            ],
        ),
        migrations.CreateModel(
            name='ConstraintLimitInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('constraints_limit', models.CharField(blank=True, max_length=400, null=True, verbose_name='Limitations on public access')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=200)),
                ('last_name', models.CharField(blank=True, max_length=200)),
                ('position', models.CharField(blank=True, max_length=200)),
                ('address', models.CharField(blank=True, max_length=200)),
                ('postcode', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=200)),
                ('country', models.CharField(blank=True, max_length=200)),
                ('state', models.CharField(blank=True, max_length=200)),
                ('email', models.CharField(blank=True, max_length=200)),
                ('organisation', models.CharField(blank=True, max_length=200)),
                ('telephone', models.CharField(blank=True, max_length=200)),
                ('fax', models.CharField(blank=True, max_length=200)),
                ('mobile', models.CharField(blank=True, max_length=200)),
                ('website', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ISOcodelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=500)),
                ('code_list', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='KeywordInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('keyword', models.CharField(max_length=200)),
                ('thesaurus_name', models.CharField(blank=True, max_length=300, null=True)),
                ('thesaurus_date', models.DateField(blank=True, null=True, verbose_name='Thesaurus publication date')),
            ],
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=200)),
                ('title', models.CharField(max_length=200)),
                ('abstract', models.TextField()),
                ('publishable', models.BooleanField(default=False)),
                ('ogc_link', models.CharField(blank=True, max_length=400, null=True, verbose_name='OGC service URL')),
                ('ogc_layer', models.CharField(blank=True, max_length=200, null=True, verbose_name='Layer name')),
                ('ogc_type', models.CharField(choices=[('WMS', 'WMS'), ('WMTS', 'WMTS'), ('XYZ', 'XYZ'), ('TMS', 'TMS'), ('WFS', 'WFS'), ('Tiled-WFS', 'Tiled-WFS'), ('GeoJSON', 'GeoJSON'), ('SOS', 'SOS'), ('MapServer', 'MapServer'), ('BingMaps', 'BingMaps'), ('MapQuest', 'MapQuest'), ('OSM', 'OSM'), ('GoogleMaps', 'GoogleMaps')], default='WMS', max_length=200, verbose_name='OGC service type')),
                ('ogc_time', models.BooleanField(default=False, help_text='Time enabled?', verbose_name='WMS/WMTS Time')),
                ('ogc_imageformat', models.CharField(blank=True, help_text='For WMS/WMTS, e.g., image/png, image/jpeg', max_length=100, null=True, verbose_name='Image format')),
                ('ogc_getfeatureinfo', models.CharField(blank=True, max_length=200, null=True, verbose_name='OGC WMS GetFeatureInfo URL')),
                ('ogc_attribution', models.CharField(blank=True, help_text='Attribution / Copyright. To add a link use the following syntax (http://www.adress.de, name)', max_length=255, null=True, verbose_name='Attribution')),
                ('ogc_times', models.TextField(blank=True, help_text='Separated by space/blank character', null=True, verbose_name='Time dimension')),
                ('statistic', models.CharField(blank=True, choices=[('time', 'Time series'), ('area', 'Area')], default=None, max_length=20, null=True, verbose_name='Layer provide data over time (time series) or area (area statistic)')),
                ('downloadable', models.BooleanField(default=False, help_text='Define whether layer can be downloaded')),
                ('download_url', models.CharField(blank=True, help_text='URL for download', max_length=300, null=True, verbose_name='Download URL')),
                ('download_layer', models.CharField(blank=True, help_text='Layername for download url (only wcs)', max_length=100, null=True, verbose_name='Download layer')),
                ('download_type', models.CharField(blank=True, choices=[('wcs', 'WCS'), ('link', 'Link / URL')], help_text='', max_length=20, verbose_name='Download type')),
                ('download_file', models.FileField(blank=True, help_text='Upload file for layer download', null=True, upload_to='downloads', verbose_name='Download file')),
                ('map_layout_image', models.FileField(blank=True, help_text='Upload for a file with the Map Layout Image', null=True, upload_to='downloads', verbose_name='Map layout image')),
                ('wmts_matrixset', models.CharField(blank=True, max_length=100, null=True, verbose_name='WMTS matrix set')),
                ('wmts_resolutions', models.TextField(blank=True, help_text='Separated by space/blank character', null=True, verbose_name='WMTS resolutions')),
                ('wmts_tilesize', models.IntegerField(blank=True, help_text='e.g., 256 or 512', null=True, verbose_name='WMTS tile size')),
                ('wmts_projection', models.CharField(blank=True, max_length=200, null=True, verbose_name='WMTS projection')),
                ('wmts_multiply', models.BooleanField(default=False, help_text='Define wether multiplication is needed for WMTS resolutions', verbose_name='WMTS multiply')),
                ('wmts_prefix_matrix_ids', models.CharField(blank=True, max_length=200, null=True, verbose_name='WMTS prefix matrix ids')),
                ('sos_default_field', models.CharField(blank=True, help_text='If blank, the first field from SOS service will be used as default field', max_length=100, null=True, verbose_name='SOS default field')),
                ('date_creation', models.DateField(blank=True, null=True, verbose_name='Dataset creation date')),
                ('date_publication', models.DateField(blank=True, null=True, verbose_name='Dataset publication date')),
                ('date_revision', models.DateField(blank=True, null=True, verbose_name='Dataset revision date')),
                ('language', models.CharField(blank=True, default='English', max_length=200)),
                ('characterset', models.CharField(blank=True, max_length=200, null=True)),
                ('format', models.CharField(blank=True, max_length=200, null=True)),
                ('dataset_epsg', models.IntegerField(blank=True, help_text='Just the projection code/number', null=True, verbose_name='EPSG code from the dataset')),
                ('west', models.FloatField(help_text='e.g. -180', verbose_name='BBOX west coordinate')),
                ('east', models.FloatField(help_text='e.g. 180', verbose_name='BBOX east coordinate')),
                ('north', models.FloatField(help_text='e.g. 90', verbose_name='BBOX north coordinate')),
                ('south', models.FloatField(help_text='e.g. -90', verbose_name='BBOX south coordinate')),
                ('geo_description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Location description')),
                ('equi_scale', models.IntegerField(blank=True, null=True, verbose_name='Spatial resolution')),
                ('resolution_distance', models.IntegerField(blank=True, null=True, verbose_name='Resolution')),
                ('resolution_unit', models.CharField(blank=True, max_length=30, null=True, verbose_name='Resolution unit')),
                ('date_begin', models.DateField(blank=True, null=True, verbose_name='Begin temporal extent')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='End temporal extent')),
                ('meta_language', models.CharField(blank=True, default='English', max_length=200, verbose_name='Metadata language')),
                ('meta_characterset', models.CharField(blank=True, max_length=200, null=True, verbose_name='Metadata character set')),
                ('meta_date', models.DateField(blank=True, null=True, verbose_name='Metadata date')),
                ('meta_lineage', models.TextField(blank=True, default='', verbose_name='Lineage information')),
                ('meta_file_info', models.TextField(blank=True, null=True, verbose_name='File info e.g. source')),
                ('legend_graphic', models.FileField(blank=True, null=True, upload_to='legend', verbose_name='Legend graphic file')),
                ('legend_url', models.URLField(blank=True, max_length=400, null=True, verbose_name='Legend graphic URL')),
                ('legend_colors', models.TextField(blank=True, null=True, verbose_name='Legend rgb colors')),
                ('legend_info', models.TextField(blank=True, verbose_name='Legend info')),
                ('auth_perm', models.BooleanField(default=False, help_text='Activate access permission for layer', verbose_name='Access permission')),
                ('download_perm', models.BooleanField(default=False, help_text='Activate download permission for layer', verbose_name='Download permission')),
                ('max_zoom', models.IntegerField(blank=True, null=True, verbose_name='Max Zoom level')),
                ('min_zoom', models.IntegerField(blank=True, null=True, verbose_name='Min Zoom level')),
                ('auth_groups', models.ManyToManyField(blank=True, related_name='layer_auth_groups', to='auth.Group', verbose_name='Access groups')),
                ('auth_users', models.ManyToManyField(blank=True, related_name='layer_auth_users', to=settings.AUTH_USER_MODEL, verbose_name='Access users')),
                ('data_source', models.ManyToManyField(blank=True, related_name='_layer_data_source_+', to='layers.Layer', verbose_name='Data source')),
                ('dataset_contact_new', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_contact', to='layers.Contact', verbose_name='Dataset contact - replaced by Dataset point  of contact(s)')),
                ('download_groups', models.ManyToManyField(blank=True, related_name='layer_download_groups', to='auth.Group')),
                ('download_users', models.ManyToManyField(blank=True, related_name='layer_download_users', to=settings.AUTH_USER_MODEL)),
                ('meta_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meta_contact', to='layers.Contact', verbose_name='Metadata contact - replaced by metadata contacts')),
                ('meta_contacts', models.ManyToManyField(blank=True, related_name='meta_contacts', to='layers.Contact', verbose_name='Metadata contact(s)')),
                ('point_of_contacts', models.ManyToManyField(blank=True, related_name='meta_point_of_contacts', to='layers.Contact', verbose_name='Dataset point of contact(s)')),
                ('scope', models.ForeignKey(default=203, on_delete=django.db.models.deletion.CASCADE, related_name='scope', to='layers.ISOcodelist')),
                ('spat_representation_type', models.ForeignKey(blank=True, default=215, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='representation_type', to='layers.ISOcodelist', verbose_name='Spatial Representation Type')),
                ('topicCategory', models.ManyToManyField(default=227, to='layers.ISOcodelist', verbose_name='Topic category')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Layergroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='LayergroupInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('layergroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='layers.Layergroup')),
                ('mapviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapviewer.MapViewer')),
            ],
        ),
        migrations.CreateModel(
            name='LayerInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='layers.Layer')),
                ('layergroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='layers.Layergroup')),
            ],
        ),
        migrations.CreateModel(
            name='OnlineResourceInline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('linkage', models.CharField(blank=True, max_length=400, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('protocol', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('function', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='layers.ISOcodelist')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layer_online_resource', to='layers.Layer')),
            ],
        ),
        migrations.AddField(
            model_name='keywordinline',
            name='layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layer_keywords', to='layers.Layer'),
        ),
        migrations.AddField(
            model_name='keywordinline',
            name='thesaurus_date_type_code_code_value',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='layers.ISOcodelist'),
        ),
        migrations.AddField(
            model_name='constraintlimitinline',
            name='layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layer_constraints_limit', to='layers.Layer'),
        ),
        migrations.AddField(
            model_name='constraintconditionsinline',
            name='layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layer_constraints_cond', to='layers.Layer'),
        ),
        migrations.AddField(
            model_name='conformityinline',
            name='date_type',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='layers.ISOcodelist', verbose_name='Date type'),
        ),
        migrations.AddField(
            model_name='conformityinline',
            name='layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layer_conformity', to='layers.Layer'),
        ),
    ]
